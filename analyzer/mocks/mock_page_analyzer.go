// Code generated by MockGen. DO NOT EDIT.
// Source: analyzer/page_analyzer.go
//
// Generated by this command:
//
//	mockgen -source=analyzer/page_analyzer.go -destination=analyzer/mocks/mock_page_analyzer.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	analyzer "github.com/isurukdniss/webpage-analyzer/analyzer"
	gomock "go.uber.org/mock/gomock"
)

// MockPageAnalyzer is a mock of PageAnalyzer interface.
type MockPageAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockPageAnalyzerMockRecorder
}

// MockPageAnalyzerMockRecorder is the mock recorder for MockPageAnalyzer.
type MockPageAnalyzerMockRecorder struct {
	mock *MockPageAnalyzer
}

// NewMockPageAnalyzer creates a new mock instance.
func NewMockPageAnalyzer(ctrl *gomock.Controller) *MockPageAnalyzer {
	mock := &MockPageAnalyzer{ctrl: ctrl}
	mock.recorder = &MockPageAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPageAnalyzer) EXPECT() *MockPageAnalyzerMockRecorder {
	return m.recorder
}

// Analyze mocks base method.
func (m *MockPageAnalyzer) Analyze(pageUrl string) *analyzer.AnalyzerResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analyze", pageUrl)
	ret0, _ := ret[0].(*analyzer.AnalyzerResult)
	return ret0
}

// Analyze indicates an expected call of Analyze.
func (mr *MockPageAnalyzerMockRecorder) Analyze(pageUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyze", reflect.TypeOf((*MockPageAnalyzer)(nil).Analyze), pageUrl)
}
